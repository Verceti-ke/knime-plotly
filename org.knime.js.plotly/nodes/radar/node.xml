<?xml version="1.0" encoding="utf-8"?>
<js:knimeNode xmlns:js="http://knime.org/dynamicjsnode/v3.0"
	xmlns="http://knime.org/dynamicnode/v3.0" xmlns:n="http://knime.org/node/v2.12"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://knime.org/dynamicjsnode/v3.0 http://www.knime.org/node/dynamicJSNode_v3.0.xsd"
	jsNamespace="knimeRadarPlot" nodeID="plotly_radar_plot"
    categoryPath="/labs/js-views/plotly" icon="../js.png" type="Visualizer">
	<name>Radar Plot (Plotly)</name>
	<shortDescription>A radar plot based on the Plotly.js library.</shortDescription>
	<fullDescription>
		<intro>
			<n:p>
			A radar plot based on the Plotly.js library. This radar plot displays each row in a data set as an individual line on a circular plot with each radii corresponding to an individual feature of that row.
			This plot only displayed numeric columns and is NOT currently compatible with other KNIME interactive views. It is also recommended that you choose to display 20 or fewer rows. This chart can be useful 
			for visualizing relationships between groups within data, but it is recommended to consolidate your statistics before using this view, rather than displaying an entire data set. A recommended node to use in
			conjunction with this view would be the 'Statistics' node to provide useful numeric information about the data set and then the radar plot to visually inspect these relationships.
			</n:p>
			<n:p>
            The node supports custom CSS styling. 
            You can simply put CSS rules into a single string and set it as a flow variable 'customCSS' 
            in the node configuration dialog. 
            Current KNIME classes are NOT YET supported, so class names will have to be deduced from the view itself. We are hoping to support standard KNIME
            classes in an upcoming release.
            <!-- You will find the list of available classes and their description on our <n:a href="https://knime.com/css-styling">documentation page</n:a>.-->
            </n:p>
            <n:p>
            Please note: the Plotly.js KNIME extension is currently in Beta. It is recommended that you handle missing values and normalize your data before using
            visualization nodes in this extension until a more stable version is released. Please feel free to leave feedback and suggestions on our community forum
            <n:a href="https://forum.knime.com/">here</n:a>.
            </n:p>
		</intro>
		<tab name="Options">
			<description>
        		General options for the KNIME Radar Plot with Plotly.
        	</description>
			<options>
				<columnFilterOption name="Included columns"
					id="columns" inPortIndex="0" label="Included columns" filterClasses="org.knime.core.data.IntValue org.knime.core.data.LongValue org.knime.core.data.DoubleValue" saveInView="true">
					Select the columns to be plotted as spokes on the radar plot.
				</columnFilterOption>
				<columnSelectorOption name="Nominal Column"
					id="groupByColumn" inPortIndex="0" label="Nominal Column" filterClasses="org.knime.core.data.StringValue">
					If the data has a column with nominal, categorical, or domain specific values, choosing this column will use these values as the labels for the lines on the plot. Otherwise, the plot will default to the KNIME rowIds.
				</columnSelectorOption>
				<!-- <checkBoxOption name="Report on missing values" id="reportMissing"
					label="Report on missing values" defaultValue="true" loadDefaults="true">
					When enabled this will display a warning whenever there is a missing value present in the data.
				</checkBoxOption>
                <radioButtonOption name="Missing values handling" id="mValues" 
                possibleValues="Skip&#160;rows&#160;with&#160;missing&#160;values Skip&#160;missing&#160;values Show&#160;missing&#160;values" 
                label="Missing values" defaultValue="Skip&#160;rows&#160;with&#160;missing&#160;values" 
					saveInView="true">
					The way missing values are handled.
				</radioButtonOption> -->
			</options>
		</tab>
		<tab name="General Plot Options">
			<description>
        		These options control the initial state of the view. 
        	</description>
			<options>
				<stringOption name="Title" id="title" label="Title"
					defaultValue="Radar Plot" optional="true" saveInView="true">
					The chart title.
				</stringOption>
				<stringOption name="Axis label" id="axisLabel" label="Axis label"
					defaultValue="" optional="true"  saveInView="true">
					The label for the radial axis. If "Enable text editing" is enabled, this value can be changed in the view.
				</stringOption>
				<checkBoxOption name="Display legend" id="showLegend"
					label="Display legend" defaultValue="true" saveInView="true">
					When checked,
					the chart's legend is displayed.
				</checkBoxOption>
				<!-- <checkBoxOption name="Show warnings in view" id="showWarnings"
					label="Show warnings in view" defaultValue="true" saveInView="true">
					When checked,
					the any warnings will be displayed in the view.
				</checkBoxOption> -->
				<colorOption name="Background color" id="backgroundColor" label="Background color"
                    format="HexString" defaultR="255" defaultG="255" defaultB="255" defaultAlpha="255">
                    The background color of the plot, including the axes labels, the title and the subtitle.
                </colorOption>                 
                <colorOption name="Data area color" id="daColor" label="Data area color"
                    format="HexString" defaultR="255" defaultG="255" defaultB="255" defaultAlpha="255">
                    The background color of the data area, within the axes.
                </colorOption>			
			</options>
		</tab>
		<tab name="Control Options">
		    <description>
        		Use these options to configure the available controls within the view.
        	</description>
			<options>
				<checkBoxOption name="Enable view controls" id="enableViewControls"
					label="Enable view controls" defaultValue="true">
					Check to enable controls in the chart.
				</checkBoxOption>
				<checkBoxOption name="Show fullscreen button" id="showFullscreen"
					label="Show fullscreen button" defaultValue="true" saveInView="true"
					enableDependency="enableViewControls" enableValue="true">
					When checked,
					a fullscreen option is displayed in the KNIME interactive menu.
				</checkBoxOption>
				<checkBoxOption name="Enable tooltip toggle" id="tooltipToggle"
					label="Enable tooltip toggle" defaultValue="true"
					enableDependency="enableViewControls" enableValue="true">
					Check to enable toggling of the tooltip within the view.
				</checkBoxOption>
				<checkBoxOption name="Enable feature selection controls" id="enableFeatureSelection"
					label="Enable feature selection controls" defaultValue="true" enableDependency="enableViewControls"
					enableValue="true">
					Check to enable column editing in the view.
				</checkBoxOption>
				<checkBoxOption name="Enable text editing" id="enableEditing"
					label="Enable text editing" defaultValue="false" enableDependency="enableViewControls"
					enableValue="true">
					Check to enable the editing of the title and axis labels within the view.
				</checkBoxOption>
				<checkBoxOption name="Enable link to Plotly editor" id="enablePlotlyEditor"
					label="Enable link to Plotly editor" defaultValue="false"
					enableDependency="enableViewControls" enableValue="true">
					Check to enable toggling of filter subscription within view.
				</checkBoxOption>
			</options>
		</tab>
	</fullDescription>
	<interactiveView name="Radar Plot">
		The KNIME Radar Plot with Plotly.
	</interactiveView>
	<ports>
		<inPort portType="Data" name="Display data" index="0">
			Data table containing two or more numeric columns to display in an interactive Radar Plot.
		</inPort>
	</ports>
	<js:resources>
		<js:resource type="js" path="../kpi/knimePlotlyInterface.js" />
		<js:resource type="js" path="radar.js" />
		<js:resource type="css" path="radar.css" />
	</js:resources>
	<js:dependencies>
		<js:dependency name="Plotly" path="plotly.js-1.47.4" type="local" exports="Plotly" />
		<js:dependency name="MultipleSelections" path="MultipleSelections" type="local" exports="MultipleSelections" />
	</js:dependencies>
</js:knimeNode>